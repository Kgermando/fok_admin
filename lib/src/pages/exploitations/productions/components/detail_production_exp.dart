import 'package:fokad_admin/src/api/auth/auth_api.dart';
import 'package:fokad_admin/src/api/comm_marketing/marketing/annuaire_api.dart';
import 'package:fokad_admin/src/api/exploitations/fournisseurs_api.dart';
import 'package:fokad_admin/src/api/exploitations/production_exp_api.dart';
import 'package:fokad_admin/src/constants/app_theme.dart';
import 'package:fokad_admin/src/constants/responsive.dart';
import 'package:fokad_admin/src/models/comm_maketing/annuaire_model.dart';
import 'package:fokad_admin/src/models/exploitations/fourniseur_model.dart';
import 'package:fokad_admin/src/models/exploitations/production_model.dart';
import 'package:fokad_admin/src/models/users/user_model.dart';
import 'package:fokad_admin/src/navigation/drawer/drawer_menu.dart';
import 'package:fokad_admin/src/navigation/header/custom_appbar.dart';
import 'package:fokad_admin/src/pages/exploitations/plateforms/desktop/production_approbation_desktop.dart';
import 'package:fokad_admin/src/pages/exploitations/plateforms/mobile/production_approbation_mobile.dart';
import 'package:fokad_admin/src/pages/exploitations/plateforms/tablet/production_approbation_tablet.dart';
import 'package:fokad_admin/src/pages/exploitations/fournisseurs/componets/table_fournisseur_filter.dart';
import 'package:fokad_admin/src/utils/loading.dart';
import 'package:fokad_admin/src/widgets/print_widget.dart';
import 'package:fokad_admin/src/widgets/title_widget.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';
import 'package:simple_speed_dial/simple_speed_dial.dart';

class DetailProductionExp extends StatefulWidget {
  const DetailProductionExp({Key? key}) : super(key: key);

  @override
  State<DetailProductionExp> createState() => _DetailProductionExpState();
}

class _DetailProductionExpState extends State<DetailProductionExp> {
  final GlobalKey<ScaffoldState> _key = GlobalKey();
  final _formKey = GlobalKey<FormState>();
  bool isLoading = false;

  TextEditingController quantityController = TextEditingController();
  TextEditingController designationController = TextEditingController();
  TextEditingController prixUnitaireController = TextEditingController();
  String? fournisseur;

  TextEditingController quantityBonneController = TextEditingController();
  TextEditingController quantityMauvaiseController = TextEditingController();
  TextEditingController coutProductionController = TextEditingController();

  @override
  initState() {
    getData();
    super.initState();
  }

  @override
  void dispose() {
    quantityController.dispose();
    designationController.dispose();
    prixUnitaireController.dispose();
    quantityBonneController.dispose();
    quantityMauvaiseController.dispose();
    coutProductionController.dispose();
    super.dispose();
  }

  List<AnnuaireModel> annuaireList = [];

  UserModel user = UserModel(
      nom: '-',
      prenom: '-',
      email: '-',
      telephone: '-',
      matricule: '-',
      departement: '-',
      servicesAffectation: '-',
      fonctionOccupe: '-',
      role: '5',
      isOnline: 'false',
      createdAt: DateTime.now(),
      passwordHash: '-',
      succursale: '-');

  Future<void> getData() async {
    UserModel userModel = await AuthApi().getUserId();
    var annuaires = await AnnuaireApi().getAllData();
    setState(() {
      user = userModel;
      annuaireList = annuaires
          .where((element) => element.categorie == 'Fournisseur')
          .toList();
    });
  }

  @override
  Widget build(BuildContext context) {
    final id = ModalRoute.of(context)!.settings.arguments as int;
    return Scaffold(
        key: _key,
        drawer: const DrawerMenu(),
        floatingActionButton: FutureBuilder<ProductionModel>(
            future: ProductionExpApi().getOneData(id),
            builder: (BuildContext context,
                AsyncSnapshot<ProductionModel> snapshot) {
              if (snapshot.hasData) {
                ProductionModel? data = snapshot.data;
                return (data != null) ? speedialWidget(data) : Container();
              } else {
                return loadingMini();
              }
            }),
        body: SafeArea(
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (Responsive.isDesktop(context))
                const Expanded(
                  child: DrawerMenu(),
                ),
              Expanded(
                flex: 5,
                child: Padding(
                    padding: const EdgeInsets.all(p10),
                    child: FutureBuilder<ProductionModel>(
                        future: ProductionExpApi().getOneData(id),
                        builder: (BuildContext context,
                            AsyncSnapshot<ProductionModel> snapshot) {
                          if (snapshot.hasData) {
                            ProductionModel? data = snapshot.data;
                            return Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    if (!Responsive.isMobile(context))
                                      SizedBox(
                                        width: p20,
                                        child: IconButton(
                                            onPressed: () =>
                                                Navigator.pop(context),
                                            icon: const Icon(Icons.arrow_back)),
                                      ),
                                    const SizedBox(width: p10),
                                    Expanded(
                                      child: CustomAppbar(
                                          title: Responsive.isDesktop(context)
                                              ? "Exploitations"
                                              : "Exp.",
                                          controllerMenu: () =>
                                              _key.currentState!.openDrawer()),
                                    ),
                                  ],
                                ),
                                Expanded(
                                    child: ListView(
                                  children: [
                                    pageDetail(data!),
                                    const SizedBox(height: p10),
                                    LayoutBuilder(
                                        builder: (context, constraints) {
                                      if (constraints.maxWidth >= 1100) {
                                        return ProductionApprobationDesktop(
                                            user: user, productionModel: data);
                                      } else if (constraints.maxWidth < 1100 &&
                                          constraints.maxWidth >= 650) {
                                        return ProductionApprobationTablet(
                                            user: user, productionModel: data);
                                      } else {
                                        return ProductionApprobationMobile(
                                            user: user, productionModel: data);
                                      }
                                    })
                                  ],
                                ))
                              ],
                            );
                          } else {
                            return Center(child: loading());
                          }
                        })),
              ),
            ],
          ),
        ));
  }

  Widget pageDetail(ProductionModel data) {
    double width = MediaQuery.of(context).size.width;
    if (MediaQuery.of(context).size.width >= 1100) {
      width = MediaQuery.of(context).size.width / 2;
    } else if (MediaQuery.of(context).size.width < 1100 &&
        MediaQuery.of(context).size.width >= 650) {
      width = MediaQuery.of(context).size.width / 1.3;
    } else if (MediaQuery.of(context).size.width < 650) {
      width = MediaQuery.of(context).size.width / 1.2;
    }
    return Row(mainAxisAlignment: MainAxisAlignment.center, children: [
      Card(
        elevation: 10,
        child: Container(
          margin: const EdgeInsets.all(p16),
          width: width,
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(p10),
            border: Border.all(
              color: Colors.blueGrey.shade700,
              width: 2.0,
            ),
          ),
          child: Column(
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  if (!Responsive.isMobile(context))
                    TitleWidget(title: data.idProduct),
                  Column(
                    children: [
                      Row(
                        children: [
                          PrintWidget(onPressed: () async {}),
                        ],
                      ),
                      SelectableText(
                          DateFormat("dd-MM-yyyy HH:mm").format(data.created),
                          textAlign: TextAlign.start),
                    ],
                  )
                ],
              ),
              dataWidget(data),
              total(data),
              const SizedBox(height: p20),
              SizedBox(
                  height: 300,
                  child: TableFournisseursFilter(reference: data.id!)),
            ],
          ),
        ),
      ),
    ]);
  }

  Widget total(ProductionModel data) {
    final headline6 = Theme.of(context).textTheme.headline6;
    double quantityProduiteTotal = 0.0;
    double totalPourcent = 0.0;

    quantityProduiteTotal =
        double.parse(data.quantityBonne) + double.parse(data.quantityMauvaise);

    totalPourcent =
        double.parse(data.quantityBonne) * 100 / quantityProduiteTotal;

    return Responsive.isMobile(context)
        ? Column(children: [
            Column(
              children: [
                const Text("Total qté Produite",
                    style: TextStyle(fontWeight: FontWeight.bold)),
                SelectableText(
                    NumberFormat.decimalPattern('fr')
                        .format(quantityProduiteTotal),
                    textAlign: TextAlign.center,
                    style: headline6),
              ],
            ),
            Container(
              decoration: BoxDecoration(
                  border: Border(
                left: BorderSide(
                  color: mainColor,
                  width: 2,
                ),
              )),
              child: Column(
                children: [
                  const Text("Qté Exploitable en %",
                      style: TextStyle(fontWeight: FontWeight.bold)),
                  Text(
                      "${NumberFormat.decimalPattern('fr').format(totalPourcent)} %",
                      textAlign: TextAlign.center,
                      maxLines: 1,
                      style:
                          headline6!.copyWith(color: Colors.orange.shade700)),
                ],
              ),
            ),
          ])
        : Row(children: [
            Expanded(
                child: Column(
              children: [
                const Text("Total qté Produite",
                    style: TextStyle(fontWeight: FontWeight.bold)),
                SelectableText(
                    NumberFormat.decimalPattern('fr')
                        .format(quantityProduiteTotal),
                    textAlign: TextAlign.center,
                    style: headline6),
              ],
            )),
            Expanded(
                child: Container(
              decoration: BoxDecoration(
                  border: Border(
                left: BorderSide(
                  color: mainColor,
                  width: 2,
                ),
              )),
              child: Column(
                children: [
                  const Text("Qté Exploitable en %",
                      style: TextStyle(fontWeight: FontWeight.bold)),
                  Text(
                      "${NumberFormat.decimalPattern('fr').format(totalPourcent)} %",
                      textAlign: TextAlign.center,
                      maxLines: 1,
                      style:
                          headline6!.copyWith(color: Colors.orange.shade700)),
                ],
              ),
            )),
          ]);
  }

  Widget dataWidget(ProductionModel data) {
    final bodyMedium = Theme.of(context).textTheme.bodyMedium;
    return Padding(
      padding: const EdgeInsets.all(p10),
      child: Column(
        children: [
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Identifiant :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium!.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.idProduct,
                        textAlign: TextAlign.justify, style: bodyMedium)
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Identifiant :',
                          textAlign: TextAlign.start,
                          style: bodyMedium!
                              .copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.idProduct,
                          textAlign: TextAlign.justify, style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Quantité à Produire :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(
                        NumberFormat.decimalPattern('fr')
                            .format(double.parse(data.quantityAProduire)),
                        textAlign: TextAlign.justify,
                        style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Quantité à Produire :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(
                          NumberFormat.decimalPattern('fr')
                              .format(double.parse(data.quantityAProduire)),
                          textAlign: TextAlign.justify,
                          style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Quantité exploitable :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(
                        NumberFormat.decimalPattern('fr')
                            .format(double.parse(data.quantityBonne)),
                        textAlign: TextAlign.justify,
                        style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Quantité exploitable :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(
                          NumberFormat.decimalPattern('fr')
                              .format(double.parse(data.quantityBonne)),
                          textAlign: TextAlign.justify,
                          style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Quantité non exploitable :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(
                        NumberFormat.decimalPattern('fr')
                            .format(double.parse(data.quantityMauvaise)),
                        textAlign: TextAlign.justify,
                        style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Quantité non exploitable :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(
                          NumberFormat.decimalPattern('fr')
                              .format(double.parse(data.quantityMauvaise)),
                          textAlign: TextAlign.justify,
                          style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Coûtt de la Production :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(
                        "${NumberFormat.decimalPattern('fr').format(double.parse(data.coutProduction))} \$",
                        textAlign: TextAlign.justify,
                        style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Coûtt de la Production :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(
                          "${NumberFormat.decimalPattern('fr').format(double.parse(data.coutProduction))} \$",
                          textAlign: TextAlign.justify,
                          style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Signature :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.signature,
                        textAlign: TextAlign.justify, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Signature :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.signature,
                          textAlign: TextAlign.justify, style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
        ],
      ),
    );
  }

  SpeedDial speedialWidget(ProductionModel data) {
    return SpeedDial(
      closedForegroundColor: themeColor,
      openForegroundColor: Colors.white,
      closedBackgroundColor: themeColor,
      openBackgroundColor: themeColor,
      speedDialChildren: <SpeedDialChild>[
        SpeedDialChild(
          child: const Icon(Icons.monetization_on),
          foregroundColor: Colors.white,
          backgroundColor: Colors.green.shade700,
          label: 'Productions',
          onPressed: () {
            addProductionDialog(data);
          },
        ),
        SpeedDialChild(
            child: const Icon(Icons.content_paste_sharp),
            foregroundColor: Colors.white,
            backgroundColor: Colors.blue.shade700,
            label: 'Ajout fournisseurs',
            onPressed: () {
              addFournisseurDialog(data);
            })
      ],
      child: const Icon(
        Icons.menu,
        color: Colors.white,
      ),
    );
  }

  addProductionDialog(ProductionModel data) {
    return showDialog(
        context: context,
        barrierDismissible: true,
        builder: (context) {
          return StatefulBuilder(builder: (context, StateSetter setState) {
            return AlertDialog(
              title:
                  Text('Production final', style: TextStyle(color: mainColor)),
              content: SizedBox(
                  height: 400,
                  width: 300,
                  child: isLoading
                      ? loading()
                      : Form(
                          key: _formKey,
                          child: Column(
                            children: [
                              const SizedBox(height: 20),
                              quantityBonneWidget(),
                              // const SizedBox(height: 20),
                              quantityMauvaiseWidget(),
                              // const SizedBox(height: 20),
                              coutProductionWidget(),
                            ],
                          ))),
              actions: <Widget>[
                TextButton(
                  onPressed: () => Navigator.pop(context, 'Cancel'),
                  child: const Text('Annuler'),
                ),
                TextButton(
                  onPressed: () {
                    isLoading = true;
                    final form = _formKey.currentState!;
                    if (form.validate()) {
                      submitProduction(data);
                      form.reset();
                    }
                  },
                  child: const Text('OK'),
                ),
              ],
            );
          });
        });
  }

  Widget quantityBonneWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: quantityBonneController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Quantité exploitable',
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget quantityMauvaiseWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: quantityMauvaiseController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Quantité non exploitable',
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget coutProductionWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: coutProductionController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'coût Production',
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  addFournisseurDialog(ProductionModel data) {
    return showDialog(
        context: context,
        barrierDismissible: true,
        builder: (context) {
          return StatefulBuilder(builder: (context, StateSetter setState) {
            return AlertDialog(
              title:
                  Text('Ajout fournisseur', style: TextStyle(color: mainColor)),
              content: SizedBox(
                  height: 400,
                  width: 300,
                  child: isLoading
                      ? loading()
                      : Form(
                          key: _formKey,
                          child: Column(
                            children: [
                              const SizedBox(height: 20),
                              quantityWidget(),
                              // const SizedBox(height: 20),
                              designationWidget(),
                              // const SizedBox(height: 20),
                              prixUnitaireWidget(),
                              // const SizedBox(height: 20),
                              fournisseurWidget(),
                            ],
                          ))),
              actions: <Widget>[
                TextButton(
                  onPressed: () => Navigator.pop(context, 'Cancel'),
                  child: const Text('Annuler'),
                ),
                TextButton(
                  onPressed: () {
                    isLoading = true;
                    final form = _formKey.currentState!;
                    if (form.validate()) {
                      submitFournisseur(data);
                      form.reset();
                    }
                  },
                  child: const Text('OK'),
                ),
              ],
            );
          });
        });
  }

  Widget quantityWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: quantityController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Quantité à produit',
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget designationWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: designationController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Quantité à produire',
          ),
          keyboardType: TextInputType.text,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget prixUnitaireWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: prixUnitaireController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Prix Unitaire',
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget fournisseurWidget() {
    List<String> dataList = [];
    dataList = annuaireList.map((e) => e.nomPostnomPrenom).toList();
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: DropdownButtonFormField<String>(
          decoration: InputDecoration(
            labelText: 'Fournisseur',
            labelStyle: const TextStyle(),
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
            contentPadding: const EdgeInsets.only(left: 5.0),
          ),
          value: fournisseur,
          isExpanded: true,
          items: dataList
              .map((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              })
              .toSet()
              .toList(),
          validator: (value) => value == null ? "Select fournisseur" : null,
          onChanged: (value) {
            setState(() {
              fournisseur = value;
            });
          },
        ));
  }

  Future<void> submitFournisseur(ProductionModel data) async {
    final fournisseurModel = FournisseurModel(
        reference: data.id!,
        quantity: quantityController.text,
        designation: designationController.text,
        prixUnitaire: prixUnitaireController.text,
        fournisseur: fournisseur.toString(),
        signature: user.matricule,
        created: DateTime.now());
    await FournisseurApi().insertData(fournisseurModel).then((value) {
      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: const Text("Founisseur ajouté avec succès!"),
        backgroundColor: Colors.green[700],
      ));
    });
  }

  Future<void> submitProduction(ProductionModel data) async {
    final productionModel = ProductionModel(
        id: data.id!,
        numProduction: data.numProduction,
        idProduct: data.idProduct,
        quantityAProduire: data.quantityAProduire,
        quantityBonne: '0',
        quantityMauvaise: '0',
        coutProduction: '0',
        signature: user.matricule,
        created: DateTime.now(),
        approbationDG: '-',
        motifDG: '-',
        signatureDG: '-',
        approbationDD: '-',
        motifDD: '-',
        signatureDD: '-');
    await ProductionExpApi().updateData(productionModel).then((value) {
      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: const Text("Soumis avec succès!"),
        backgroundColor: Colors.green[700],
      ));
    });
  }
}
