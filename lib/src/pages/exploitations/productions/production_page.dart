import 'package:fokad_admin/src/api/auth/auth_api.dart';
import 'package:fokad_admin/src/api/comm_marketing/commerciale/produit_model_api.dart';
import 'package:fokad_admin/src/api/exploitations/production_exp_api.dart';
import 'package:fokad_admin/src/constants/app_theme.dart';
import 'package:fokad_admin/src/constants/responsive.dart';
import 'package:fokad_admin/src/models/comm_maketing/prod_model.dart';
import 'package:fokad_admin/src/models/exploitations/production_model.dart';
import 'package:fokad_admin/src/models/users/user_model.dart';
import 'package:fokad_admin/src/navigation/drawer/drawer_menu.dart';
import 'package:fokad_admin/src/navigation/header/custom_appbar.dart';
import 'package:fokad_admin/src/pages/exploitations/productions/components/table_production.dart';
import 'package:fokad_admin/src/utils/loading.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class ProductionExp extends StatefulWidget {
  const ProductionExp({Key? key}) : super(key: key);

  @override
  State<ProductionExp> createState() => _ProductionExpState();
}

class _ProductionExpState extends State<ProductionExp> {
  final GlobalKey<ScaffoldState> _key = GlobalKey();
  final _formKey = GlobalKey<FormState>();

  late Future<List<ProductionModel>> dataFuture;

  int numProduction = 0;
  String? idProduct;
  TextEditingController quantityAProduireController = TextEditingController();

  @override
  void initState() {
    getData();
    dataFuture = getDataFuture();
    super.initState();
  }

  @override
  void dispose() {
    quantityAProduireController.dispose();
    super.dispose();
  }

  List<ProductModel> idProdList = [];
  String signature = "";
  Future<void> getData() async {
    UserModel userModel = await AuthApi().getUserId();
    var prodModels = await ProduitModelApi().getAllData();
    setState(() {
      signature = userModel.matricule;
      idProdList = prodModels
          .where((element) => element.approbationDD == "Approved")
          .toList();
    });
  }

  Future<List<ProductionModel>> getDataFuture() async {
    var dataList = await ProductionExpApi().getAllData();
    return dataList;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        key: _key,
        drawer: const DrawerMenu(),
        floatingActionButton: FloatingActionButton(
            tooltip: "Nouvelle production",
            child: const Icon(Icons.add),
            onPressed: () {
              addNewDialog();
            }),
        body: SafeArea(
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (Responsive.isDesktop(context))
                const Expanded(
                  child: DrawerMenu(),
                ),
              Expanded(
                flex: 5,
                child: Padding(
                  padding: const EdgeInsets.all(p10),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      CustomAppbar(
                          title: 'Exploitations',
                          controllerMenu: () =>
                              _key.currentState!.openDrawer()),
                      const Expanded(child: TableProduction())
                    ],
                  ),
                ),
              ),
            ],
          ),
        ));
  }

  addNewDialog() {
    return showDialog(
        context: context,
        barrierDismissible: true,
        builder: (context) {
          return StatefulBuilder(builder: (context, StateSetter setState) {
            bool isLoading = false;
            return FutureBuilder<List<ProductionModel>>(
                future: dataFuture,
                builder: (BuildContext context,
                    AsyncSnapshot<List<ProductionModel>> snapshot) {
                  if (snapshot.hasData) {
                    List<ProductionModel>? dataList = snapshot.data;
                    numProduction = dataList!.length + 1;
                    return AlertDialog(
                      title: Text('Nouvelle production',
                          style: TextStyle(color: mainColor)),
                      content: SizedBox(
                          height: 250,
                          width: 300,
                          child: isLoading
                              ? loading()
                              : Form(
                                  key: _formKey,
                                  child: Column(
                                    children: [
                                      const SizedBox(height: 20),
                                      idProductWidget(),
                                      const SizedBox(height: 20),
                                      quantityAProduireWidget(),
                                    ],
                                  ))),
                      actions: <Widget>[
                        TextButton(
                          onPressed: () => Navigator.pop(context, 'Cancel'),
                          child: const Text('Annuler'),
                        ),
                        TextButton(
                          onPressed: () {
                            isLoading = true;
                            final form = _formKey.currentState!;
                            if (form.validate()) {
                              submit();
                              form.reset();
                            }
                          },
                          child: const Text('OK'),
                        ),
                      ],
                    );
                  } else {
                    return Center(child: loadingMega());
                  }
                });
          });
        });
  }

  Widget idProductWidget() {
    List<String> dataList = [];
    dataList = idProdList.map((e) => e.idProduct).toList();
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: DropdownButtonFormField<String>(
          decoration: InputDecoration(
            labelText: 'Selection Identifiant du produit',
            labelStyle: const TextStyle(),
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
            contentPadding: const EdgeInsets.only(left: 5.0),
          ),
          value: idProduct,
          isExpanded: true,
          items: dataList
              .map((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              })
              .toSet()
              .toList(),
          validator: (value) => value == null ? "Select Identifiant" : null,
          onChanged: (value) {
            setState(() {
              idProduct = value;
            });
          },
        ));
  }

  Widget quantityAProduireWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: quantityAProduireController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Quantité à produire',
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Future<void> submit() async {
    final productionModel = ProductionModel(
        numProduction: numProduction,
        idProduct: idProduct.toString(),
        quantityAProduire: quantityAProduireController.text,
        quantityBonne: '0',
        quantityMauvaise: '0',
        coutProduction: '0',
        signature: signature,
        created: DateTime.now(),
        approbationDG: 'Approved',
        motifDG: '-',
        signatureDG: '-',
        approbationDD: 'Approved',
        motifDD: '-',
        signatureDD: '-');
    await ProductionExpApi().insertData(productionModel).then((value) {
      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: const Text("Soumis avec succès!"),
        backgroundColor: Colors.green[700],
      ));
    });
  }
}
