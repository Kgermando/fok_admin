import 'dart:async';

import 'package:flutter/material.dart';
import 'package:fokad_admin/src/api/exploitations/projets_api.dart';
import 'package:fokad_admin/src/api/exploitations/versement_projet_api.dart';
import 'package:fokad_admin/src/constants/app_theme.dart';
import 'package:fokad_admin/src/constants/responsive.dart';
import 'package:fokad_admin/src/models/exploitations/projet_model.dart';
import 'package:fokad_admin/src/models/exploitations/versement_projet_model.dart';
import 'package:fokad_admin/src/navigation/drawer/drawer_menu.dart';
import 'package:fokad_admin/src/navigation/header/custom_appbar.dart';
import 'package:fokad_admin/src/pages/exploitations/dashboard/components/chart_line_projet.dart';
import 'package:fokad_admin/src/routes/routes.dart';
import 'package:fokad_admin/src/widgets/dash_number_exp_widget.dart';
import 'package:intl/intl.dart';

class DashboardExp extends StatefulWidget {
  const DashboardExp({Key? key}) : super(key: key);

  @override
  State<DashboardExp> createState() => _DashboardExpState();
}

class _DashboardExpState extends State<DashboardExp> {
  final GlobalKey<ScaffoldState> _key = GlobalKey();
  final ScrollController _controllerScroll = ScrollController();

  int projetsCount = 0;
  int projetsApprouveCount = 0;
  double coutProjetsTotal = 0.0; // Tous les projets
  double versementTotal = 0.0; // Tous les projets
  double recetteAttendusTotal = 0.0;
  double recettePourcent = 0.0;

  @override
  void initState() {
    getData();
    super.initState();
  }

  List<ProjetModel> projetList = [];
  List<VersementProjetModel> versementList = [];
  Future<void> getData() async {
    var projets = await ProjetsApi().getAllData();
    var versements = await VersementProjetApi().getAllData();
    setState(() {
      projetsCount = projets.length;
      projetsApprouveCount = projets
          .where((element) =>
              element.approbationDD == "Approved" &&
              element.approbationBudget == "Approved" &&
              element.approbationFin == "Approved")
          .length;

      projetList = projets
          .where((element) =>
              element.approbationDD == "Approved" &&
              element.approbationBudget == "Approved" &&
              element.approbationFin == "Approved")
          .toList();
      versementList = versements.toList();

      for (var item in projetList) {
        coutProjetsTotal += double.parse(item.coutProjet);
      }

      for (var item in projetList) {
        recetteAttendusTotal += double.parse(item.recetteAttendus);
      }

      for (var item in versementList) {
        versementTotal += double.parse(item.montantVerser);
      }
      // Pourcentage de recettes
      recettePourcent = versementTotal * 100 / recetteAttendusTotal;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        key: _key,
        drawer: const DrawerMenu(),
        body: SafeArea(
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (Responsive.isDesktop(context))
                const Expanded(
                  child: DrawerMenu(),
                ),
              Expanded(
                flex: 5,
                child: Padding(
                  padding: const EdgeInsets.all(p10),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      CustomAppbar(
                          title: (Responsive.isDesktop(context))
                              ? 'Dashboard Exploitations'
                              : 'Dashboard',
                          controllerMenu: () =>
                              _key.currentState!.openDrawer()),
                      Expanded(
                          child: Scrollbar(
                        controller: _controllerScroll,
                        child: ListView(
                          controller: _controllerScroll,
                          children: [
                            Wrap(
                              alignment: WrapAlignment.spaceEvenly,
                              children: [
                                DashNumberExpWidget(
                                    gestureTapCallback: () {
                                      Navigator.pushNamed(context,
                                          ExploitationRoutes.expProjet);
                                    },
                                    number: '$projetsCount',
                                    title: 'Total projets',
                                    icon: Icons.group,
                                    color: Colors.blue.shade700),
                                DashNumberExpWidget(
                                    gestureTapCallback: () {
                                      Navigator.pushNamed(context,
                                          ExploitationRoutes.expProjet);
                                    },
                                    number: '$projetsApprouveCount',
                                    title: 'Projets approvés',
                                    icon: Icons.work,
                                    color: Colors.green.shade700),
                                DashNumberExpWidget(
                                    gestureTapCallback: () {
                                      Navigator.pushNamed(context,
                                          ExploitationRoutes.expProjet);
                                    },
                                    number:
                                        '${NumberFormat.decimalPattern('fr').format(coutProjetsTotal)} \$',
                                    title: 'Total coût projets',
                                    icon: Icons.monetization_on_outlined,
                                    color: Colors.red.shade700),
                                DashNumberExpWidget(
                                    gestureTapCallback: () {
                                      Navigator.pushNamed(context,
                                          ExploitationRoutes.expVersement);
                                    },
                                    number:
                                        '${NumberFormat.decimalPattern('fr').format(versementTotal)} \$',
                                    title: 'Total recettes',
                                    icon: Icons.monetization_on,
                                    color: Colors.pink.shade700),
                                DashNumberExpWidget(
                                    gestureTapCallback: () {
                                      Navigator.pushNamed(context,
                                          ExploitationRoutes.expVersement);
                                    },
                                    number:
                                        '${NumberFormat.decimalPattern('fr').format(recettePourcent)} %',
                                    title: 'Recettes en %',
                                    icon: Icons.grain,
                                    color: Colors.grey.shade700),
                              ],
                            ),
                            Wrap(
                              children: const [
                                ChartLineProjet(),
                              ],
                            )
                          ],
                        ),
                      ))
                    ],
                  ),
                ),
              ),
            ],
          ),
        ));
  }
}
