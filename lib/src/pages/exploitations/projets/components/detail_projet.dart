import 'package:fokad_admin/src/api/exploitations/versement_projet_api.dart';
import 'package:fokad_admin/src/models/exploitations/versement_projet_model.dart';
import 'package:fokad_admin/src/pages/exploitations/plateforms/desktop/projet_approbation_desktop.dart';
import 'package:fokad_admin/src/pages/exploitations/plateforms/mobile/projet_approbation_mobile.dart';
import 'package:fokad_admin/src/pages/exploitations/plateforms/tablet/projet_approbation_tablet.dart';
import 'package:flutter/material.dart';
import 'package:fokad_admin/src/api/auth/auth_api.dart';
import 'package:fokad_admin/src/api/budgets/departement_budget_api.dart';
import 'package:fokad_admin/src/api/budgets/ligne_budgetaire_api.dart';
import 'package:fokad_admin/src/api/exploitations/projets_api.dart';
import 'package:fokad_admin/src/constants/app_theme.dart';
import 'package:fokad_admin/src/constants/responsive.dart';
import 'package:fokad_admin/src/models/budgets/departement_budget_model.dart';
import 'package:fokad_admin/src/models/budgets/ligne_budgetaire_model.dart';
import 'package:fokad_admin/src/models/exploitations/projet_model.dart';
import 'package:fokad_admin/src/models/users/user_model.dart';
import 'package:fokad_admin/src/navigation/drawer/drawer_menu.dart';
import 'package:fokad_admin/src/navigation/header/custom_appbar.dart';
import 'package:fokad_admin/src/pages/exploitations/projets/components/projet_pdf.dart';
import 'package:fokad_admin/src/pages/exploitations/projets/components/table_agent_projet.dart';
import 'package:fokad_admin/src/pages/exploitations/projets/components/table_tache.dart';
import 'package:fokad_admin/src/pages/exploitations/projets/components/table_versement.dart';
import 'package:fokad_admin/src/routes/routes.dart';
import 'package:fokad_admin/src/utils/loading.dart';
import 'package:fokad_admin/src/widgets/print_widget.dart';
import 'package:fokad_admin/src/widgets/title_widget.dart';
import 'package:intl/intl.dart';
import 'package:simple_speed_dial/simple_speed_dial.dart';

class DetailProjet extends StatefulWidget {
  const DetailProjet({Key? key}) : super(key: key);

  @override
  State<DetailProjet> createState() => _DetailProjetState();
}

class _DetailProjetState extends State<DetailProjet> {
  final GlobalKey<ScaffoldState> _key = GlobalKey();
  bool isLoading = false;
  bool isChecked = false;

  @override
  initState() {
    getData();
    super.initState();
  }

  List<VersementProjetModel> versementList = [];

  List<DepartementBudgetModel> departementsList = [];
  List<LigneBudgetaireModel> ligneBudgetaireList = [];
  UserModel user = UserModel(
      nom: '-',
      prenom: '-',
      email: '-',
      telephone: '-',
      matricule: '-',
      departement: '-',
      servicesAffectation: '-',
      fonctionOccupe: '-',
      role: '5',
      isOnline: 'false',
      createdAt: DateTime.now(),
      passwordHash: '-',
      succursale: '-');

  Future<void> getData() async {
    UserModel userModel = await AuthApi().getUserId();
    var departements = await DepeartementBudgetApi().getAllData();
    var budgets = await LIgneBudgetaireApi().getAllData();
    var versements = await VersementProjetApi().getAllData();
    setState(() {
      user = userModel;
      departementsList = departements;
      ligneBudgetaireList = budgets;
      versementList = versements;
    });
  }

  @override
  Widget build(BuildContext context) {
    final id = ModalRoute.of(context)!.settings.arguments as int;
    return Scaffold(
        key: _key,
        drawer: const DrawerMenu(),
        floatingActionButton: FutureBuilder<ProjetModel>(
            future: ProjetsApi().getOneData(id),
            builder:
                (BuildContext context, AsyncSnapshot<ProjetModel> snapshot) {
              if (snapshot.hasData) {
                ProjetModel? data = snapshot.data;
                return (data != null) ? speedialWidget(data) : Container();
              } else {
                return loadingMini();
              }
            }),
        body: SafeArea(
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (Responsive.isDesktop(context))
                const Expanded(
                  child: DrawerMenu(),
                ),
              Expanded(
                flex: 5,
                child: Padding(
                    padding: const EdgeInsets.all(p10),
                    child: FutureBuilder<ProjetModel>(
                        future: ProjetsApi().getOneData(id),
                        builder: (BuildContext context,
                            AsyncSnapshot<ProjetModel> snapshot) {
                          if (snapshot.hasData) {
                            ProjetModel? data = snapshot.data;
                            return Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    if (!Responsive.isMobile(context))
                                      SizedBox(
                                        width: p20,
                                        child: IconButton(
                                            onPressed: () =>
                                                Navigator.pop(context),
                                            icon: const Icon(Icons.arrow_back)),
                                      ),
                                    const SizedBox(width: p10),
                                    Expanded(
                                      child: CustomAppbar(
                                          title: Responsive.isDesktop(context)
                                              ? "Exploitations"
                                              : "Exp.",
                                          controllerMenu: () =>
                                              _key.currentState!.openDrawer()),
                                    ),
                                  ],
                                ),
                                Expanded(
                                    child: ListView(
                                  children: [
                                    pageDetail(data!),
                                    const SizedBox(height: p10),
                                    // LayoutBuilder(
                                    //     builder: (context, constraints) {
                                    //   if (constraints.maxWidth >= 1100) {
                                    //     return ProjetApprobationDesktop(
                                    //         departementsList: departementsList,
                                    //         ligneBudgetaireList:
                                    //             ligneBudgetaireList,
                                    //         user: user,
                                    //         projetModel: data);
                                    //   } else if (constraints.maxWidth < 1100 &&
                                    //       constraints.maxWidth >= 650) {
                                    //     return ProjetApprobationTablet(
                                    //         departementsList: departementsList,
                                    //         ligneBudgetaireList:
                                    //             ligneBudgetaireList,
                                    //         user: user,
                                    //         projetModel: data);
                                    //   } else {
                                    //     return ProjetApprobationMobile(
                                    //         departementsList: departementsList,
                                    //         ligneBudgetaireList:
                                    //             ligneBudgetaireList,
                                    //         user: user,
                                    //         projetModel: data);
                                    //   }
                                    // })
                                  ],
                                ))
                              ],
                            );
                          } else {
                            return Center(child: loading());
                          }
                        })),
              ),
            ],
          ),
        ));
  }

  Widget total(ProjetModel data) {
    final headline6 = Theme.of(context).textTheme.headline6;
    double versementTotal = 0.0;
    double recetteTotal = double.parse(data.recetteAttendus);

    for (var element in versementList
        .where((element) => element.nomProjet == data.nomProjet)) {
      versementTotal += double.parse(element.montantVerser);
    }

    double recettePourcent = versementTotal * 100 / recetteTotal;

    return Responsive.isMobile(context)
        ? Column(children: [
            Column(
              children: [
                const Text("Versements",
                    style: TextStyle(fontWeight: FontWeight.bold)),
                SelectableText(
                    "${NumberFormat.decimalPattern('fr').format(versementTotal)} \$",
                    textAlign: TextAlign.center,
                    style: headline6),
              ],
            ),
            Container(
              decoration: BoxDecoration(
                  border: Border(
                left: BorderSide(
                  color: mainColor,
                  width: 2,
                ),
              )),
              child: Column(
                children: [
                  const Text("Versements en %",
                      style: TextStyle(fontWeight: FontWeight.bold)),
                  Text(
                      "${NumberFormat.decimalPattern('fr').format(recettePourcent)} %",
                      textAlign: TextAlign.center,
                      maxLines: 1,
                      style:
                          headline6!.copyWith(color: Colors.orange.shade700)),
                ],
              ),
            ),
          ])
        : Row(children: [
            Expanded(
                child: Column(
              children: [
                const Text("Versements",
                    style: TextStyle(fontWeight: FontWeight.bold)),
                SelectableText(
                    "${NumberFormat.decimalPattern('fr').format(versementTotal)} \$",
                    textAlign: TextAlign.center,
                    style: headline6),
              ],
            )),
            Expanded(
                child: Container(
              decoration: BoxDecoration(
                  border: Border(
                left: BorderSide(
                  color: mainColor,
                  width: 2,
                ),
              )),
              child: Column(
                children: [
                  const Text("Versements en %",
                      style: TextStyle(fontWeight: FontWeight.bold)),
                  Text(
                      "${NumberFormat.decimalPattern('fr').format(recettePourcent)} %",
                      textAlign: TextAlign.center,
                      maxLines: 1,
                      style:
                          headline6!.copyWith(color: Colors.orange.shade700)),
                ],
              ),
            )),
          ]);
  }

  Widget pageDetail(ProjetModel data) {
    double width = MediaQuery.of(context).size.width;
    if (MediaQuery.of(context).size.width >= 1100) {
      width = MediaQuery.of(context).size.width / 2;
    } else if (MediaQuery.of(context).size.width < 1100 &&
        MediaQuery.of(context).size.width >= 650) {
      width = MediaQuery.of(context).size.width / 1.3;
    } else if (MediaQuery.of(context).size.width < 650) {
      width = MediaQuery.of(context).size.width / 1.2;
    }
    return Row(mainAxisAlignment: MainAxisAlignment.center, children: [
      Card(
        elevation: 10,
        child: Container(
          margin: const EdgeInsets.all(p16),
          width: width,
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(p10),
            border: Border.all(
              color: Colors.blueGrey.shade700,
              width: 2.0,
            ),
          ),
          child: Column(
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  if (!Responsive.isMobile(context))
                    TitleWidget(title: data.nomProjet),
                  Column(
                    children: [
                      Row(
                        children: [
                          // if (data.approbationDG == "Unapproved" ||
                          //     data.approbationDD == "Unapproved" ||
                          //     data.approbationBudget == "Unapproved" ||
                          //     data.approbationFin == "Unapproved")
                          if (int.parse(user.role) < 2) editButton(data),
                          PrintWidget(onPressed: () async {
                            await ProjetPdf.generate(data);
                          }),
                        ],
                      ),
                      SelectableText(
                          DateFormat("dd-MM-yyyy HH:mm").format(data.created),
                          textAlign: TextAlign.start),
                    ],
                  )
                ],
              ),
              dataWidget(data),
              total(data),
              const SizedBox(height: p20),
              SizedBox(
                  height: 300,
                  child: ListAgentProjet(
                      createdRef: data.createdRef,
                      approuved: data.approbationDD)),
              SizedBox(height: 300, child: TableTache(projetModel: data)),
              SizedBox(height: 300, child: TableVersement(projetModel: data)),
            ],
          ),
        ),
      ),
    ]);
  }

  Widget editButton(ProjetModel data) {
    return IconButton(
      icon: Icon(Icons.edit, color: Colors.red.shade700),
      tooltip: "Modification",
      onPressed: () => showDialog<String>(
        context: context,
        builder: (BuildContext context) => AlertDialog(
          title: const Text('Etes-vous sûr de modifier ceci?'),
          content: const Text('Cette action permet de modifier le projet.'),
          actions: <Widget>[
            TextButton(
              onPressed: () => Navigator.pop(context, 'Cancel'),
              child: const Text('Annuler'),
            ),
            TextButton(
              onPressed: () async {
                Navigator.pushNamed(context, ExploitationRoutes.expProjetUpdate,
                    arguments: data);
              },
              child: const Text('OK'),
            ),
          ],
        ),
      ),
    );
  }

  Widget dataWidget(ProjetModel data) {
    final bodyMedium = Theme.of(context).textTheme.bodyMedium;
    return Padding(
      padding: const EdgeInsets.all(p10),
      child: Column(
        children: [
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Nom Projet :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium!.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.nomProjet,
                        textAlign: TextAlign.justify, style: bodyMedium)
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Nom Projet :',
                          textAlign: TextAlign.start,
                          style: bodyMedium!
                              .copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.nomProjet,
                          textAlign: TextAlign.justify, style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Coût du Projet :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(
                        "${NumberFormat.decimalPattern('fr').format(double.parse(data.coutProjet))} \$",
                        textAlign: TextAlign.justify,
                        style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Coût du Projet :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(
                          "${NumberFormat.decimalPattern('fr').format(double.parse(data.coutProjet))} \$",
                          textAlign: TextAlign.justify,
                          style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Responsable :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.responsable,
                        textAlign: TextAlign.justify, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Responsable :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.responsable,
                          textAlign: TextAlign.justify, style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Objectifs :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.objectifs,
                        textAlign: TextAlign.justify, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Objectifs :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.objectifs,
                          textAlign: TextAlign.justify, style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Description :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.description,
                        textAlign: TextAlign.justify, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Description :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.description,
                          textAlign: TextAlign.justify, style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Responsabilite :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.responsabilite,
                        textAlign: TextAlign.justify, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Responsabilite :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.responsabilite,
                          textAlign: TextAlign.justify, style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Communication :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.communication,
                        textAlign: TextAlign.justify, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Communication :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.communication,
                          textAlign: TextAlign.justify, style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Processus de Verification :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.processusVerification,
                        textAlign: TextAlign.justify, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Processus de Verification :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.processusVerification,
                          textAlign: TextAlign.justify, style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Problème potientiel et risque :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.problemePotientEtRisque,
                        textAlign: TextAlign.justify, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Problème potientiel et risque :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.problemePotientEtRisque,
                          textAlign: TextAlign.justify, style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Date de Debut et Fin :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.dateDebutEtFin,
                        textAlign: TextAlign.justify, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Date de Debut et Fin :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.dateDebutEtFin,
                          textAlign: TextAlign.justify, style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Budget detailé :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.budgetDetail,
                        textAlign: TextAlign.justify, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Budget detailé :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.budgetDetail,
                          textAlign: TextAlign.justify, style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Recettes attendu :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(
                        "${NumberFormat.decimalPattern('fr').format(double.parse(data.recetteAttendus))} \$",
                        textAlign: TextAlign.justify,
                        style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 2,
                      child: Text('Recettes attendu :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(
                          "${NumberFormat.decimalPattern('fr').format(double.parse(data.recetteAttendus))} \$",
                          textAlign: TextAlign.justify,
                          style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Row(
                  children: [
                    Text('Signature :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.signature,
                        textAlign: TextAlign.justify, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Signature :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.signature,
                          textAlign: TextAlign.justify, style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Type Financement :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.typeFinancement,
                        textAlign: TextAlign.justify, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Type Financement :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.typeFinancement,
                          textAlign: TextAlign.justify, style: bodyMedium),
                    )
                  ],
                ),
          Divider(color: mainColor),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text(
                      'Observation',
                      style: bodyMedium.copyWith(fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(
                      height: p10,
                    ),
                    if (data.observation == 'false' &&
                        user.departement == "Finances")
                      checkboxRead(data),
                    (data.observation == 'true')
                        ? SelectableText(
                            'Payé',
                            style: bodyMedium.copyWith(
                                color: Colors.greenAccent.shade700),
                          )
                        : SelectableText(
                            'Non payé',
                            style: bodyMedium.copyWith(
                                color: Colors.redAccent.shade700),
                          )
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      child: Text(
                        'Observation',
                        style: bodyMedium.copyWith(fontWeight: FontWeight.bold),
                      ),
                    ),
                    const SizedBox(
                      width: p10,
                    ),
                    if (data.observation == 'false' &&
                        user.departement == "Finances")
                      Expanded(child: checkboxRead(data)),
                    Expanded(
                        child: (data.observation == 'true')
                            ? SelectableText(
                                'Payé',
                                style: bodyMedium.copyWith(
                                    color: Colors.greenAccent.shade700),
                              )
                            : SelectableText(
                                'Non payé',
                                style: bodyMedium.copyWith(
                                    color: Colors.redAccent.shade700),
                              ))
                  ],
                ),
          Divider(color: mainColor),
        ],
      ),
    );
  }

  Color getColor(Set<MaterialState> states) {
    const Set<MaterialState> interactiveStates = <MaterialState>{
      MaterialState.pressed,
      MaterialState.hovered,
      MaterialState.focused,
    };
    if (states.any(interactiveStates.contains)) {
      return Colors.red;
    }
    return Colors.green;
  }

  checkboxRead(ProjetModel data) {
    isChecked = data.observation == 'false';
    return ListTile(
      leading: Checkbox(
        checkColor: Colors.white,
        fillColor: MaterialStateProperty.resolveWith(getColor),
        value: isChecked,
        onChanged: (bool? value) {
          setState(() {
            isLoading = true;
          });
          setState(() {
            isChecked = value!;
            submitObservation(data);
          });
          setState(() {
            isLoading = false;
          });
        },
      ),
      title: const Text("Confirmation de payement"),
    );
  }

  SpeedDial speedialWidget(ProjetModel data) {
    return SpeedDial(
      closedForegroundColor: themeColor,
      openForegroundColor: Colors.white,
      closedBackgroundColor: themeColor,
      openBackgroundColor: themeColor,
      speedDialChildren: <SpeedDialChild>[
        SpeedDialChild(
          child: const Icon(Icons.monetization_on),
          foregroundColor: Colors.white,
          backgroundColor: Colors.green.shade700,
          label: 'Versement',
          onPressed: () {
            Navigator.pushNamed(context, ExploitationRoutes.expVersementAdd,
                arguments: data);
          },
        ),
        SpeedDialChild(
            child: const Icon(Icons.content_paste_sharp),
            foregroundColor: Colors.white,
            backgroundColor: Colors.blue.shade700,
            label: 'Nouvelle tache',
            onPressed: () {
              Navigator.pushNamed(context, ExploitationRoutes.expTacheAdd,
                  arguments: data);
            })
      ],
      child: const Icon(
        Icons.menu,
        color: Colors.white,
      ),
    );
  }

  Future<void> submitObservation(ProjetModel data) async {
    final projetModel = ProjetModel(
        id: data.id,
        nomProjet: data.nomProjet,
        coutProjet: data.coutProjet,
        responsable: data.responsable,
        objectifs: data.objectifs,
        description: data.description,
        responsabilite: data.responsabilite,
        communication: data.communication,
        processusVerification: data.processusVerification,
        problemePotientEtRisque: data.problemePotientEtRisque,
        dateDebutEtFin: data.dateDebutEtFin,
        budgetDetail: data.budgetDetail,
        recetteAttendus: data.recetteAttendus,
        typeFinancement: data.typeFinancement,
        observation: 'true',
        signature: data.signature,
        createdRef: data.createdRef,
        created: data.created,
        approbationDG: data.approbationDG,
        motifDG: data.motifDG,
        signatureDG: data.signatureDG,
        approbationBudget: data.approbationBudget,
        motifBudget: data.motifBudget,
        signatureBudget: data.signatureBudget,
        approbationFin: data.approbationFin,
        motifFin: data.motifFin,
        signatureFin: data.signatureFin,
        approbationDD: data.approbationDD,
        motifDD: data.motifDD,
        signatureDD: data.signatureDD,
        ligneBudgetaire: data.ligneBudgetaire,
        ressource: data.ressource);
    await ProjetsApi().updateData(projetModel).then((value) {
      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: const Text("Mise à jour avec succès!"),
        backgroundColor: Colors.green[700],
      ));
    });
  }
}
