import 'dart:async';

import 'package:fokad_admin/src/api/rh/agents_api.dart';
import 'package:fokad_admin/src/models/rh/agent_model.dart';
import 'package:easy_autocomplete/easy_autocomplete.dart';
import 'package:flutter/material.dart';
import 'package:fokad_admin/src/api/auth/auth_api.dart';
import 'package:fokad_admin/src/api/exploitations/agent_role_api.dart';
import 'package:fokad_admin/src/constants/app_theme.dart';
import 'package:fokad_admin/src/models/exploitations/agent_role_model.dart';
import 'package:fokad_admin/src/models/users/user_model.dart';
import 'package:fokad_admin/src/pages/exploitations/projets/components/agent_projet_xlsx.dart';
import 'package:fokad_admin/src/widgets/print_widget.dart';
import 'package:fokad_admin/src/widgets/title_widget.dart';
import 'package:fokad_admin/src/utils/class_implemented.dart';
import 'package:pluto_grid/pluto_grid.dart';

class ListAgentProjet extends StatefulWidget {
  const ListAgentProjet(
      {Key? key, required this.createdRef, required this.approuved})
      : super(key: key);
  final DateTime createdRef;
  final String approuved;

  @override
  State<ListAgentProjet> createState() => _ListAgentProjetState();
}

class _ListAgentProjetState extends State<ListAgentProjet> {
  List<PlutoColumn> columns = [];
  List<PlutoRow> rows = [];
  PlutoGridStateManager? stateManager;
  PlutoGridSelectingMode gridSelectingMode = PlutoGridSelectingMode.row;

  final _formKey = GlobalKey<FormState>();

  TextEditingController agentController = TextEditingController();
  TextEditingController roleController = TextEditingController();

  @override
  void initState() {
    getData();
    agentsColumn();
    agentsRow();
    super.initState();
  }

  @override
  void dispose() {
    agentController.dispose();
    roleController.dispose();
    super.dispose();
  }

  List<AgentModel> agentList = [];
  // Export excel
  List<AgentRoleModel> dataList = [];
  String? signature;
  Future<void> getData() async {
    UserModel userModel = await AuthApi().getUserId();
    var agents = await AgentsApi().getAllData();
    List<AgentRoleModel> agentRoles = await AgentRoleApi().getAllData();
    setState(() {
      signature = userModel.matricule;
      agentList = agents;
      dataList = agentRoles
          .where((element) =>
              element.reference.microsecondsSinceEpoch ==
              widget.createdRef.microsecondsSinceEpoch)
          .toList();
    });
  }

  @override
  Widget build(BuildContext context) {
    return PlutoGrid(
      columns: columns,
      rows: rows,
      onLoaded: (PlutoGridOnLoadedEvent event) {
        stateManager = event.stateManager;
        stateManager!.setShowColumnFilter(true);
        stateManager!.notifyListeners();
      },
      createHeader: (PlutoGridStateManager header) {
        return Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            const TitleWidget(title: "Liste agents & rôle"),
            Row(
              children: [
                if (widget.approuved == "-")
                  IconButton(
                      tooltip: 'Ajouter les personnels ici.',
                      onPressed: () {
                        addAgentDialog();
                      },
                      icon: Icon(Icons.add, color: Colors.red.shade700)),
                PrintWidget(onPressed: () {
                  AgentRoleXlsx().exportToExcel(dataList);
                  if (!mounted) return;
                  ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                    content: const Text("Exportation effectué!"),
                    backgroundColor: Colors.green[700],
                  ));
                })
              ],
            ),
          ],
        );
      },
      configuration: PlutoGridConfiguration(
        columnFilter: PlutoGridColumnFilterConfig(
          filters: const [
            ...FilterHelper.defaultFilters,
            // custom filter
            ClassFilterImplemented(),
          ],
          resolveDefaultColumnFilter: (column, resolver) {
            if (column.field == 'agent') {
              return resolver<ClassFilterImplemented>() as PlutoFilterType;
            } else if (column.field == 'role') {
              return resolver<ClassFilterImplemented>() as PlutoFilterType;
            }
            return resolver<PlutoFilterTypeContains>() as PlutoFilterType;
          },
        ),
      ),
    );
  }

  void agentsColumn() {
    columns = [
      PlutoColumn(
        readOnly: true,
        title: 'Agent',
        field: 'agent',
        type: PlutoColumnType.text(),
        enableRowDrag: true,
        enableContextMenu: false,
        enableDropToResize: true,
        titleTextAlign: PlutoColumnTextAlign.left,
        width: 400,
        minWidth: 150,
      ),
      PlutoColumn(
        readOnly: true,
        title: 'Rôle',
        field: 'role',
        type: PlutoColumnType.text(),
        enableRowDrag: true,
        enableContextMenu: false,
        enableDropToResize: true,
        titleTextAlign: PlutoColumnTextAlign.left,
        width: 400,
        minWidth: 150,
      ),
    ];
  }

  Future agentsRow() async {
    var agentRoles = await AgentRoleApi().getAllData();

    var data = agentRoles
        .where((element) =>
            element.reference.microsecondsSinceEpoch ==
            widget.createdRef.microsecondsSinceEpoch)
        .toList();

    if (mounted) {
      setState(() {
        for (var item in data) {
          rows.add(PlutoRow(cells: {
            'agent': PlutoCell(value: item.agent),
            'role': PlutoCell(value: item.role),
          }));
        }
        stateManager!.resetCurrentState();
      });
    }
  }

  addAgentDialog() {
    return showDialog(
        context: context,
        barrierDismissible: true,
        builder: (context) {
          return StatefulBuilder(builder: (context, StateSetter setState) {
            return AlertDialog(
              title: const Text('Ajout agent'),
              content: SizedBox(
                  height: 200,
                  width: 300,
                  child: Form(
                    key: _formKey,
                    child: Column(
                      children: [
                        agentWidget(),
                        roleWidget(),
                      ],
                    ),
                  )),
              actions: <Widget>[
                TextButton(
                  onPressed: () => Navigator.pop(context, 'Cancel'),
                  child: const Text('Annuler'),
                ),
                TextButton(
                  onPressed: () {
                    final form = _formKey.currentState!;
                    if (form.validate()) {
                      submit();
                      form.reset();
                    }
                  },
                  child: const Text('OK'),
                ),
              ],
            );
          });
        });
  }

  Widget agentWidget() {
    List<String> suggestionList = agentList.map((e) => e.matricule).toList();
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: EasyAutocomplete(
          controller: agentController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: "Matricule ou identifiant de l'agent",
          ),
          keyboardType: TextInputType.text,
          suggestions: suggestionList,
          validator: (value) => value == null ? "Select Service" : null,
        ));
  }

  Widget roleWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: roleController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Rôle',
          ),
          keyboardType: TextInputType.text,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Future<void> submit() async {
    final agentRole = AgentRoleModel(
        reference: widget.createdRef,
        agent: agentController.text,
        role: roleController.text);
    await AgentRoleApi().insertData(agentRole).then((value) {
      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: const Text("Ajouté avec succès!"),
        backgroundColor: Colors.green[700],
      ));
    });
  }
}
