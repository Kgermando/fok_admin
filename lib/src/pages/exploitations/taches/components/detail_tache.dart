import 'package:fokad_admin/src/api/mails/mail_api.dart';
import 'package:fokad_admin/src/api/user/user_api.dart';
import 'package:fokad_admin/src/models/mail/mail_model.dart';
import 'package:flutter/material.dart';
import 'package:fokad_admin/src/api/auth/auth_api.dart';
import 'package:fokad_admin/src/api/exploitations/rapport_api.dart';
import 'package:fokad_admin/src/api/exploitations/taches_api.dart';
import 'package:fokad_admin/src/constants/app_theme.dart';
import 'package:fokad_admin/src/constants/responsive.dart';
import 'package:fokad_admin/src/models/exploitations/rapport_model.dart';
import 'package:fokad_admin/src/models/exploitations/tache_model.dart';
import 'package:fokad_admin/src/models/users/user_model.dart';
import 'package:fokad_admin/src/navigation/drawer/drawer_menu.dart';
import 'package:fokad_admin/src/navigation/header/custom_appbar.dart';
import 'package:fokad_admin/src/utils/loading.dart';
import 'package:fokad_admin/src/widgets/btn_widget.dart';
import 'package:fokad_admin/src/widgets/title_widget.dart';
import 'package:intl/intl.dart';
import 'package:timeago/timeago.dart' as timeago;

final _lightColors = [
  // Colors.pinkAccent.shade700,
  Colors.tealAccent.shade700,
  mainColor,
  Colors.lightGreen.shade700,
  Colors.lightBlue.shade700,
  Colors.orange.shade700,
];

class DetailTache extends StatefulWidget {
  const DetailTache({Key? key}) : super(key: key);

  @override
  State<DetailTache> createState() => _DetailTacheState();
}

class _DetailTacheState extends State<DetailTache> {
  final GlobalKey<ScaffoldState> _key = GlobalKey();
  final _formKey = GlobalKey<FormState>();
  late Future<List<RapportModel>> dataFuture;
  bool isLoading = false;
  bool isLoadingRead = false;
  String readRapport = 'false';

  TextEditingController rapportController = TextEditingController();

  @override
  initState() {
    getData();
    dataFuture = getDataFuture();
    super.initState();
  }

  @override
  void dispose() {
    rapportController.dispose();
    super.dispose();
  }

  List<UserModel> userList = [];
  UserModel user = UserModel(
      nom: '-',
      prenom: '-',
      email: '-',
      telephone: '-',
      matricule: '-',
      departement: '-',
      servicesAffectation: '-',
      fonctionOccupe: '-',
      role: '5',
      isOnline: 'false',
      createdAt: DateTime.now(),
      passwordHash: '-',
      succursale: '-');
  Future<void> getData() async {
    UserModel userModel = await AuthApi().getUserId();
    var users = await UserApi().getAllData();
    setState(() {
      user = userModel;
      userList = users;
    });
  }

  Future<List<RapportModel>> getDataFuture() async {
    var dataList = await RapportApi().getAllData();
    return dataList;
  }

  @override
  Widget build(BuildContext context) {
    final id = ModalRoute.of(context)!.settings.arguments as int;
    return Scaffold(
        key: _key,
        drawer: const DrawerMenu(),
        body: SafeArea(
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (Responsive.isDesktop(context))
                const Expanded(
                  child: DrawerMenu(),
                ),
              Expanded(
                flex: 5,
                child: Padding(
                    padding: const EdgeInsets.all(p10),
                    child: FutureBuilder<TacheModel>(
                        future: TachesApi().getOneData(id),
                        builder: (BuildContext context,
                            AsyncSnapshot<TacheModel> snapshot) {
                          if (snapshot.hasData) {
                            TacheModel? data = snapshot.data;
                            return Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    if (!Responsive.isMobile(context))
                                      SizedBox(
                                        width: p20,
                                        child: IconButton(
                                            onPressed: () =>
                                                Navigator.pop(context),
                                            icon: const Icon(Icons.arrow_back)),
                                      ),
                                    const SizedBox(width: p10),
                                    Expanded(
                                      child: CustomAppbar(
                                          title: "Exploitations",
                                          controllerMenu: () =>
                                              _key.currentState!.openDrawer()),
                                    ),
                                  ],
                                ),
                                Expanded(
                                    child: SingleChildScrollView(
                                        child: pageDetail(data!)))
                              ],
                            );
                          } else {
                            return Center(child: loading());
                          }
                        })),
              ),
            ],
          ),
        ));
  }

  Widget pageDetail(TacheModel data) {
    double width = MediaQuery.of(context).size.width;
    if (MediaQuery.of(context).size.width >= 1100) {
      width = MediaQuery.of(context).size.width / 2;
    } else if (MediaQuery.of(context).size.width < 1100 &&
        MediaQuery.of(context).size.width >= 650) {
      width = MediaQuery.of(context).size.width / 1.3;
    } else if (MediaQuery.of(context).size.width < 650) {
      width = MediaQuery.of(context).size.width / 1.2;
    }
    return Row(mainAxisAlignment: MainAxisAlignment.center, children: [
      Card(
        elevation: 10,
        child: Container(
          margin: const EdgeInsets.all(p16),
          width: width,
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(p10),
            border: Border.all(
              color: Colors.blueGrey.shade700,
              width: 2.0,
            ),
          ),
          child: Column(
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const TitleWidget(title: 'Votre tache'),
                  Column(
                    children: [
                      SelectableText(
                          DateFormat("dd-MM-yyyy HH:mm").format(data.created),
                          textAlign: TextAlign.start),
                    ],
                  )
                ],
              ),
              dataWidget(data),
              Divider(
                color: mainColor,
              ),
              if (data.read == 'true')
                Text("✅ Ce rapport est fermé",
                    style: Theme.of(context)
                        .textTheme
                        .bodyMedium!
                        .copyWith(color: Colors.green.shade700)),
              if (data.signatureResp == user.matricule && data.read == 'false')
                checkboxRead(data),
              rapportWidget(data),
              Divider(
                color: mainColor,
              ),
              listRapport(data),
            ],
          ),
        ),
      ),
    ]);
  }

  Color getColor(Set<MaterialState> states) {
    const Set<MaterialState> interactiveStates = <MaterialState>{
      MaterialState.pressed,
      MaterialState.hovered,
      MaterialState.focused,
    };
    if (states.any(interactiveStates.contains)) {
      return Colors.red;
    }
    return Colors.green;
  }

  checkboxRead(TacheModel data) {
    bool read = false;
    readRapport = data.read;
    if (readRapport == 'true') {
      read = true;
    } else if (readRapport == 'false') {
      read = false;
    }
    return ListTile(
      leading: (isLoadingRead)
          ? loadingMini()
          : Checkbox(
              checkColor: Colors.white,
              fillColor: MaterialStateProperty.resolveWith(getColor),
              value: read,
              onChanged: (bool? value) {
                setState(() {
                  isLoadingRead = true;
                });
                setState(() {
                  read = value!;
                  if (read) {
                    readRapport == 'true';
                  } else {
                    readRapport == 'false';
                  }
                  // confirmeLecture(data);
                });
              },
            ),
      title: const Text("Confirmation de lecture"),
    );
  }

  Widget dataWidget(TacheModel data) {
    final bodyMedium = Theme.of(context).textTheme.bodyMedium;
    return Padding(
      padding: const EdgeInsets.all(p10),
      child: Column(
        children: [
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Nom Projet :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium!.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.nomProjet,
                        textAlign: TextAlign.start, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Nom Projet :',
                          textAlign: TextAlign.start,
                          style: bodyMedium!
                              .copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.nomProjet,
                          textAlign: TextAlign.start, style: bodyMedium),
                    )
                  ],
                ),
          Divider(
            color: mainColor,
          ),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Numero Tache :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.numeroTache,
                        textAlign: TextAlign.start, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Numero Tache :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.numeroTache,
                          textAlign: TextAlign.start, style: bodyMedium),
                    )
                  ],
                ),
          Divider(
            color: mainColor,
          ),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Jalon du projet:',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.jalon,
                        textAlign: TextAlign.start, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Jalon du projet:',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.jalon,
                          textAlign: TextAlign.start, style: bodyMedium),
                    )
                  ],
                ),
          Divider(
            color: mainColor,
          ),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Agent :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.agent,
                        textAlign: TextAlign.start, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Agent :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.agent,
                          textAlign: TextAlign.start, style: bodyMedium),
                    )
                  ],
                ),
          Divider(
            color: mainColor,
          ),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Responsable :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.signatureResp,
                        textAlign: TextAlign.start, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Responsable :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.signatureResp,
                          textAlign: TextAlign.start, style: bodyMedium),
                    )
                  ],
                ),
          Divider(
            color: mainColor,
          ),
          Responsive.isMobile(context)
              ? Column(
                  children: [
                    Text('Tâche :',
                        textAlign: TextAlign.start,
                        style:
                            bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    SelectableText(data.tache,
                        textAlign: TextAlign.start, style: bodyMedium),
                  ],
                )
              : Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Text('Tâche :',
                          textAlign: TextAlign.start,
                          style:
                              bodyMedium.copyWith(fontWeight: FontWeight.bold)),
                    ),
                    Expanded(
                      flex: 3,
                      child: SelectableText(data.tache,
                          textAlign: TextAlign.start, style: bodyMedium),
                    )
                  ],
                ),
        ],
      ),
    );
  }

  Widget listRapport(TacheModel data) {
    final bodyLarge = Theme.of(context).textTheme.bodyLarge;
    return Column(
      children: [
        Row(mainAxisAlignment: MainAxisAlignment.end, children: [
          IconButton(
              color: Colors.green.shade700,
              onPressed: () {
                setState(() {
                  dataFuture = getDataFuture();
                });
              },
              icon: const Icon(Icons.refresh))
        ]),
        SizedBox(
            height: 500,
            child: FutureBuilder<List<RapportModel>>(
                future: dataFuture,
                builder: (BuildContext context,
                    AsyncSnapshot<List<RapportModel>> snapshot) {
                  if (snapshot.hasData) {
                    List<RapportModel>? rapports = snapshot.data!
                        .where((element) =>
                            element.nomProjet == data.nomProjet &&
                            element.signature == data.agent)
                        .toList();
                    return rapports.isEmpty
                        ? Column(
                            children: [
                              Center(
                                child: Text(
                                  "Vous n'avez pas encore de rapport.",
                                  style: bodyLarge,
                                ),
                              ),
                            ],
                          )
                        : ListView.builder(
                            itemCount: rapports.length,
                            itemBuilder: (context, index) {
                              final rapport = rapports[index];
                              return buildRapport(data, rapport, index);
                            });
                  } else {
                    return Center(child: loading());
                  }
                })),
      ],
    );
  }

  Widget buildRapport(TacheModel data, RapportModel rapportModel, int index) {
    final bodySmall = Theme.of(context).textTheme.bodySmall;
    final bodyMedium = Theme.of(context).textTheme.bodyMedium;
    final color = _lightColors[index % _lightColors.length];

    return Card(
      elevation: 10,
      child: Padding(
        padding: const EdgeInsets.all(p10),
        child: Column(
          children: [
            ListTile(
              visualDensity: VisualDensity.comfortable,
              dense: true,
              leading: Icon(Icons.person,
                  color: (data.signatureResp == user.matricule)
                      ? Colors.red
                      : color,
                  size: 50),
              title: SelectableText(
                rapportModel.signature,
                style: bodySmall,
              ),
              subtitle: SelectableText(
                rapportModel.numeroTache,
                style: bodySmall,
              ),
              trailing: SelectableText(
                  timeago.format(rapportModel.created, locale: 'fr_short'),
                  textAlign: TextAlign.start,
                  style: bodySmall!.copyWith(
                      color: (data.signatureResp == user.matricule)
                          ? Colors.red
                          : color)),
            ),
            SelectableText(rapportModel.rapport,
                style: bodyMedium, textAlign: TextAlign.justify),
          ],
        ),
      ),
    );
  }

  Widget rapportWidget(TacheModel data) {
    return Padding(
      padding: const EdgeInsets.all(p10),
      child: Form(
        key: _formKey,
        child: Column(
          children: [
            rapportControllerWidget(data),
            const SizedBox(
              height: p20,
            ),
            BtnWidget(
                title: 'Soumettre',
                isLoading: isLoading,
                press: () {
                  final form = _formKey.currentState!;
                  if (form.validate()) {
                    submit(data);
                    form.reset();
                  }
                })
          ],
        ),
      ),
    );
  }

  Widget rapportControllerWidget(TacheModel data) {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: rapportController,
          keyboardType: TextInputType.multiline,
          minLines: 5,
          maxLines: 10,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: (data.signatureResp == user.matricule)
                ? 'Ecrivez votre remarque ici...'
                : 'Ecrivez votre rapport ici...',
          ),
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Future<void> submit(TacheModel data) async {
    final rapportModel = RapportModel(
        nomProjet: data.nomProjet,
        numeroTache: data.numeroTache,
        rapport: rapportController.text,
        signature: user.matricule.toString(),
        created: DateTime.now());
    await RapportApi().insertData(rapportModel).then((value) {
      // Navigator.of(context).pop();
      if (data.signatureResp != user.matricule) {
        sendEmail(data);
      }
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: const Text("Soumis avec succès!"),
        backgroundColor: Colors.green[700],
      ));
    });
  }

  Future<void> confirmeLecture(TacheModel data) async {
    final tacheModel = TacheModel(
        id: data.id,
        nomProjet: data.nomProjet,
        numeroTache: data.numeroTache,
        agent: data.agent,
        jalon: data.jalon,
        tache: data.tache,
        signatureResp: user.matricule.toString(),
        created: DateTime.now(),
        read: readRapport);
    await TachesApi().updateData(tacheModel).then((value) {
      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: const Text("Confirmation effectuée réussie!"),
        backgroundColor: Colors.green[700],
      ));
    });
  }

  // Send Email
  Future<void> sendEmail(TacheModel data) async {
    UserModel userResp = userList
        .where((element) => element.matricule == data.signatureResp)
        .first;
    final mailModel = MailModel(
        fullName: "${userResp.prenom} ${userResp.nom}",
        email: userResp.email,
        cc: '-',
        objet: "SALAIRE",
        message: "Bonjour ${userResp.prenom}, Vous venez de reçevoir à "
            "l'instant un rapport du ${data.nomProjet}. \n Rapport de ${data.agent}. \n \n Cordialement.",
        pieceJointe: "-",
        read: 'false',
        fullNameDest: "${user.prenom} ${user.nom}",
        emailDest: user.email,
        dateSend: DateTime.now(),
        dateRead: DateTime.now());
    await MailApi().insertData(mailModel);
  }
}
