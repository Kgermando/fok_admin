import 'package:flutter/material.dart';
import 'package:fokad_admin/src/api/auth/auth_api.dart';
import 'package:fokad_admin/src/api/exploitations/versement_projet_api.dart';
import 'package:fokad_admin/src/constants/app_theme.dart';
import 'package:fokad_admin/src/constants/responsive.dart';
import 'package:fokad_admin/src/models/exploitations/projet_model.dart';
import 'package:fokad_admin/src/models/exploitations/versement_projet_model.dart';
import 'package:fokad_admin/src/models/users/user_model.dart';
import 'package:fokad_admin/src/navigation/drawer/drawer_menu.dart';
import 'package:fokad_admin/src/navigation/header/custom_appbar.dart';
import 'package:fokad_admin/src/widgets/btn_widget.dart';
import 'package:fokad_admin/src/widgets/title_widget.dart';
import 'package:flutter/services.dart';

class AddVersementProjet extends StatefulWidget {
  const AddVersementProjet({Key? key, required this.projetModel})
      : super(key: key);
  final ProjetModel projetModel;

  @override
  State<AddVersementProjet> createState() => _AddVersementProjetState();
}

class _AddVersementProjetState extends State<AddVersementProjet> {
  final GlobalKey<ScaffoldState> _key = GlobalKey();
  final ScrollController _controllerScroll = ScrollController();
  final _formKey = GlobalKey<FormState>();
  bool isLoading = false;

  TextEditingController pieceJustificativeController = TextEditingController();
  TextEditingController montantVerserController = TextEditingController();
  TextEditingController montantEnLettreController = TextEditingController();

  String? typeVersement;

  @override
  initState() {
    getData();
    super.initState();
  }

  @override
  void dispose() {
    _controllerScroll.dispose();
    pieceJustificativeController.dispose();
    montantVerserController.dispose();
    montantEnLettreController.dispose();
    super.dispose();
  }

  String? signature;
  Future<void> getData() async {
    UserModel userModel = await AuthApi().getUserId();
    setState(() {
      signature = userModel.matricule;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        key: _key,
        drawer: const DrawerMenu(),
        body: SafeArea(
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              if (Responsive.isDesktop(context))
                const Expanded(
                  child: DrawerMenu(),
                ),
              Expanded(
                flex: 5,
                child: Padding(
                  padding: const EdgeInsets.all(p10),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          if (!Responsive.isMobile(context))
                            SizedBox(
                              width: p20,
                              child: IconButton(
                                  onPressed: () => Navigator.pop(context),
                                  icon: const Icon(Icons.arrow_back)),
                            ),
                          const SizedBox(width: p10),
                          Expanded(
                              flex: 5,
                              child: CustomAppbar(
                                  title: 'Exploitations',
                                  controllerMenu: () =>
                                      _key.currentState!.openDrawer())),
                        ],
                      ),
                      Expanded(child: addPageWidget())
                    ],
                  ),
                ),
              ),
            ],
          ),
        ));
  }

  Widget addPageWidget() {
    double width = MediaQuery.of(context).size.width;
    if (MediaQuery.of(context).size.width >= 1100) {
      width = MediaQuery.of(context).size.width / 2;
    } else if (MediaQuery.of(context).size.width < 1100 &&
        MediaQuery.of(context).size.width >= 650) {
      width = MediaQuery.of(context).size.width / 1.3;
    } else if (MediaQuery.of(context).size.width < 650) {
      width = MediaQuery.of(context).size.width / 1.2;
    }
    final bodyMedium = Theme.of(context).textTheme.bodyMedium;
    return Form(
      key: _formKey,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Card(
            elevation: 10,
            child: Padding(
              padding: const EdgeInsets.all(p16),
              child: SizedBox(
                width: width,
                child: ListView(
                  controller: _controllerScroll,
                  children: [
                    const TitleWidget(title: "Ajout Versement"),
                    const SizedBox(
                      height: p20,
                    ),
                    Responsive.isMobile(context)
                        ? Column(
                            children: [
                              Text('Nom Projet :',
                                  textAlign: TextAlign.start,
                                  style: bodyMedium!
                                      .copyWith(fontWeight: FontWeight.bold)),
                              SelectableText(widget.projetModel.nomProjet,
                                  textAlign: TextAlign.start,
                                  style: bodyMedium),
                            ],
                          )
                        : Row(
                            children: [
                              Expanded(
                                flex: 1,
                                child: Text('Nom Projet :',
                                    textAlign: TextAlign.start,
                                    style: bodyMedium!
                                        .copyWith(fontWeight: FontWeight.bold)),
                              ),
                              Expanded(
                                flex: 3,
                                child: SelectableText(
                                    widget.projetModel.nomProjet,
                                    textAlign: TextAlign.start,
                                    style: bodyMedium),
                              )
                            ],
                          ),
                    Divider(
                      color: mainColor,
                    ),
                    Responsive.isMobile(context)
                        ? Column(
                            children: [
                              montantVerserWidget(),
                              montantEnLettreWidget()
                            ],
                          )
                        : Row(
                            children: [
                              Expanded(child: montantVerserWidget()),
                              const SizedBox(
                                width: p10,
                              ),
                              Expanded(child: montantEnLettreWidget())
                            ],
                          ),
                    Responsive.isMobile(context)
                        ? Column(
                            children: [
                              typeVersementWidget(),
                              pieceJustificativeWidget()
                            ],
                          )
                        : Row(
                            children: [
                              Expanded(child: typeVersementWidget()),
                              const SizedBox(
                                width: p10,
                              ),
                              Expanded(child: pieceJustificativeWidget())
                            ],
                          ),
                    const SizedBox(
                      height: p20,
                    ),
                    BtnWidget(
                        title: 'Soumettre',
                        isLoading: isLoading,
                        press: () {
                          final form = _formKey.currentState!;
                          if (form.validate()) {
                            submit();
                            form.reset();
                          }
                        })
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget pieceJustificativeWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: pieceJustificativeController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Piece Justificative',
          ),
          keyboardType: TextInputType.text,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget montantVerserWidget() {
    final headline6 = Theme.of(context).textTheme.headline6;
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Expanded(
              flex: 4,
              child: TextFormField(
                controller: montantVerserController,
                decoration: InputDecoration(
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10.0)),
                  labelText: 'Montant Ã  Verser',
                ),
                keyboardType:
                    const TextInputType.numberWithOptions(decimal: true),
                inputFormatters: [
                  FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
                ],
                style: const TextStyle(),
                validator: (value) {
                  if (value != null && value.isEmpty) {
                    return 'Ce champs est obligatoire';
                  } else {
                    return null;
                  }
                },
              ),
            ),
            const SizedBox(width: p20),
            Expanded(
                flex: 1,
                child: Text(
                  "\$",
                  style: headline6,
                ))
          ],
        ));
  }

  Widget montantEnLettreWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: montantEnLettreController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Montant en Lettre',
          ),
          keyboardType: TextInputType.text,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget typeVersementWidget() {
    List<String> dataList = ['Virement', 'caisse'];
    return Container(
      margin: const EdgeInsets.only(bottom: p20),
      child: DropdownButtonFormField<String>(
        decoration: InputDecoration(
          labelText: 'Type de Versement',
          labelStyle: const TextStyle(),
          border: OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
          contentPadding: const EdgeInsets.only(left: 5.0),
        ),
        value: typeVersement,
        isExpanded: true,
        items: dataList.map((String value) {
          return DropdownMenuItem<String>(
            value: value,
            child: Text(value),
          );
        }).toList(),
        onChanged: (value) {
          setState(() {
            typeVersement = value!;
          });
        },
      ),
    );
  }

  Future<void> submit() async {
    final versementProjetModel = VersementProjetModel(
        nomProjet: widget.projetModel.nomProjet,
        pieceJustificative: pieceJustificativeController.text,
        montantVerser: montantVerserController.text,
        montantEnLettre: montantEnLettreController.text,
        typeVersement: typeVersement.toString(),
        signature: signature.toString(),
        created: DateTime.now());
    await VersementProjetApi().insertData(versementProjetModel).then((value) {
      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: const Text("Enregistrer avec succÃ¨s!"),
        backgroundColor: Colors.green[700],
      ));
    });
  }
}
