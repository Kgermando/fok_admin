import 'package:flutter/material.dart';
import 'package:fokad_admin/src/api/auth/auth_api.dart';
import 'package:fokad_admin/src/api/exploitations/agent_role_api.dart';
import 'package:fokad_admin/src/api/exploitations/taches_api.dart';
import 'package:fokad_admin/src/constants/app_theme.dart';
import 'package:fokad_admin/src/constants/responsive.dart';
import 'package:fokad_admin/src/models/exploitations/agent_role_model.dart';
import 'package:fokad_admin/src/models/exploitations/projet_model.dart';
import 'package:fokad_admin/src/models/exploitations/tache_model.dart';
import 'package:fokad_admin/src/models/users/user_model.dart';
import 'package:fokad_admin/src/navigation/drawer/drawer_menu.dart';
import 'package:fokad_admin/src/navigation/header/custom_appbar.dart';
import 'package:fokad_admin/src/utils/loading.dart';
import 'package:fokad_admin/src/widgets/btn_widget.dart';
import 'package:fokad_admin/src/widgets/title_widget.dart';

class AddTacheExp extends StatefulWidget {
  const AddTacheExp({Key? key, required this.projetModel}) : super(key: key);
  final ProjetModel projetModel;

  @override
  State<AddTacheExp> createState() => _AddTacheExpState();
}

class _AddTacheExpState extends State<AddTacheExp> {
  final GlobalKey<ScaffoldState> _key = GlobalKey();
  final _formKey = GlobalKey<FormState>();
  bool isLoading = false;

  TextEditingController nomProjetController = TextEditingController();
  TextEditingController jalonController = TextEditingController();
  TextEditingController tacheController = TextEditingController();
  String? agent;
  bool soumettre = false;

  int numeroTache = 0;

  @override
  initState() {
    getData();
    super.initState();
  }

  @override
  void dispose() {
    nomProjetController.dispose();
    jalonController.dispose();
    tacheController.dispose();

    super.dispose();
  }

  List<AgentRoleModel> agentRoleList = [];
  String? signature;
  Future<void> getData() async {
    UserModel userModel = await AuthApi().getUserId();
    var agents = await AgentRoleApi().getAllData();
    setState(() {
      signature = userModel.matricule;
      agentRoleList = agents
          .where((element) =>
              element.reference.microsecondsSinceEpoch ==
              widget.projetModel.createdRef.microsecondsSinceEpoch)
          .toList();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        key: _key,
        drawer: const DrawerMenu(),
        body: SafeArea(
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              if (Responsive.isDesktop(context))
                const Expanded(
                  child: DrawerMenu(),
                ),
              Expanded(
                flex: 5,
                child: Padding(
                  padding: const EdgeInsets.all(p10),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          if (!Responsive.isMobile(context))
                            SizedBox(
                              width: p20,
                              child: IconButton(
                                  onPressed: () => Navigator.pop(context),
                                  icon: const Icon(Icons.arrow_back)),
                            ),
                          const SizedBox(width: p10),
                          Expanded(
                              flex: 5,
                              child: CustomAppbar(
                                  title: "Exploitations",
                                  controllerMenu: () =>
                                      _key.currentState!.openDrawer())),
                        ],
                      ),
                      Expanded(
                        child: FutureBuilder<List<TacheModel>>(
                            future: TachesApi().getAllData(),
                            builder: (BuildContext context,
                                AsyncSnapshot<List<TacheModel>> snapshot) {
                              if (snapshot.hasData) {
                                List<TacheModel>? data = snapshot.data;
                                numeroTache = data!
                                    .where((element) =>
                                        element.nomProjet ==
                                        widget.projetModel.nomProjet)
                                    .length;
                                return addPageWidget(
                                    widget.projetModel.nomProjet, numeroTache);
                              } else {
                                return Center(child: loadingMega());
                              }
                            }),
                      )
                    ],
                  ),
                ),
              ),
            ],
          ),
        ));
  }

  Widget addPageWidget(String nomProjet, int numeroTache) {
    double width = MediaQuery.of(context).size.width;
    if (MediaQuery.of(context).size.width >= 1100) {
      width = MediaQuery.of(context).size.width / 2;
    } else if (MediaQuery.of(context).size.width < 1100 &&
        MediaQuery.of(context).size.width >= 650) {
      width = MediaQuery.of(context).size.width / 1.3;
    } else if (MediaQuery.of(context).size.width < 650) {
      width = MediaQuery.of(context).size.width / 1.2;
    }
    return Form(
      key: _formKey,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Card(
            elevation: 10,
            child: Padding(
              padding: const EdgeInsets.all(p16),
              child: SizedBox(
                width: width,
                child: Column(
                  children: [
                    const TitleWidget(title: "Nouvelle Tache"),
                    const SizedBox(
                      height: p20,
                    ),
                    agentWidget(),
                    jalonControllerWidget(),
                    tacheControllerWidget(),
                    const SizedBox(
                      height: p20,
                    ),
                    BtnWidget(
                        title: 'Soumettre',
                        isLoading: isLoading,
                        press: () {
                          final form = _formKey.currentState!;
                          if (form.validate()) {
                            submit(nomProjet, numeroTache);
                            form.reset();
                          }
                        })
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget agentWidget() {
    var agentList = agentRoleList.map((e) => e.agent).toList();
    return Container(
      margin: const EdgeInsets.only(bottom: p20),
      child: DropdownButtonFormField<String>(
        decoration: InputDecoration(
          labelText: 'Personnel',
          labelStyle: const TextStyle(),
          border: OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
          contentPadding: const EdgeInsets.only(left: 5.0),
        ),
        value: agent,
        isExpanded: true,
        items: agentList.map((String value) {
          return DropdownMenuItem<String>(
            value: value,
            child: Text(value),
          );
        }).toList(),
        validator: (value) => value == null ? "Select personnel" : null,
        onChanged: (value) {
          setState(() {
            agent = value!;
          });
        },
      ),
    );
  }

  Widget jalonControllerWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: jalonController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Jalon',
          ),
          keyboardType: TextInputType.multiline,
          minLines: 1,
          maxLines: 3,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget tacheControllerWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: tacheController,
          keyboardType: TextInputType.multiline,
          minLines: 5,
          maxLines: 10,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Tâches',
          ),
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Future<void> submit(String nomProjet, int numeroTache) async {
    final tacheModel = TacheModel(
        nomProjet: nomProjet,
        numeroTache: "${numeroTache + 1}",
        agent: agent.toString(),
        jalon: jalonController.text,
        tache: tacheController.text,
        signatureResp: signature.toString(),
        created: DateTime.now(),
        read: 'false');
    await TachesApi().insertData(tacheModel).then((value) {
      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: const Text("Tache créé avec succès!"),
        backgroundColor: Colors.green[700],
      ));
    });
  }
}
