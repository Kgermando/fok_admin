import 'package:flutter/material.dart';
import 'package:fokad_admin/src/api/auth/auth_api.dart';
import 'package:fokad_admin/src/api/exploitations/projets_api.dart';
import 'package:fokad_admin/src/constants/app_theme.dart';
import 'package:fokad_admin/src/constants/responsive.dart';
import 'package:fokad_admin/src/models/exploitations/projet_model.dart';
import 'package:fokad_admin/src/models/users/user_model.dart';
import 'package:fokad_admin/src/navigation/drawer/drawer_menu.dart';
import 'package:fokad_admin/src/navigation/header/custom_appbar.dart';
import 'package:fokad_admin/src/widgets/btn_widget.dart';
import 'package:fokad_admin/src/widgets/button_widget.dart';
import 'package:fokad_admin/src/widgets/title_widget.dart';
import 'package:intl/intl.dart';

class UpdateProjet extends StatefulWidget {
  const UpdateProjet({Key? key, required this.projetModel}) : super(key: key);
  final ProjetModel projetModel;

  @override
  State<UpdateProjet> createState() => _UpdateProjetState();
}

class _UpdateProjetState extends State<UpdateProjet> {
  final GlobalKey<ScaffoldState> _key = GlobalKey();
  final _formKey = GlobalKey<FormState>();
  bool isLoading = false;
  DateTimeRange? dateRange;

  TextEditingController nomProjetController = TextEditingController();
  TextEditingController coutProjetController = TextEditingController();
  TextEditingController responsableController = TextEditingController();
  TextEditingController objectifsController = TextEditingController();
  TextEditingController descriptionController = TextEditingController();
  TextEditingController resourcesController = TextEditingController();
  TextEditingController responsabiliteController = TextEditingController();
  TextEditingController communicationController = TextEditingController();
  TextEditingController processusVerificationController =
      TextEditingController();
  TextEditingController problemePotientEtRisqueController =
      TextEditingController();
  TextEditingController budgetDetailController = TextEditingController();
  TextEditingController recetteAttendusController = TextEditingController();

  List<TextEditingController> agentControllerList = [];
  List<TextEditingController> roleControllerList = [];

  String? typeFinancement;

  String getPlageDate() {
    if (dateRange == null) {
      return 'Select une autre Date de Debut et Fin';
    } else {
      return '${DateFormat('dd/MM/yyyy').format(dateRange!.start)} - ${DateFormat('dd/MM/yyyy').format(dateRange!.end)}';
    }
  }

  @override
  initState() {
    getData();
    nomProjetController =
        TextEditingController(text: widget.projetModel.nomProjet);
    coutProjetController =
        TextEditingController(text: widget.projetModel.coutProjet);
    responsableController =
        TextEditingController(text: widget.projetModel.responsable);
    objectifsController =
        TextEditingController(text: widget.projetModel.objectifs);
    descriptionController =
        TextEditingController(text: widget.projetModel.description);
    responsabiliteController =
        TextEditingController(text: widget.projetModel.responsabilite);
    communicationController =
        TextEditingController(text: widget.projetModel.communication);
    processusVerificationController =
        TextEditingController(text: widget.projetModel.processusVerification);
    problemePotientEtRisqueController =
        TextEditingController(text: widget.projetModel.problemePotientEtRisque);
    budgetDetailController =
        TextEditingController(text: widget.projetModel.budgetDetail);
    recetteAttendusController =
        TextEditingController(text: widget.projetModel.recetteAttendus);
    typeFinancement = widget.projetModel.typeFinancement;
    super.initState();
  }

  @override
  void dispose() {
    nomProjetController.dispose();
    responsableController.dispose();
    objectifsController.dispose();
    descriptionController.dispose();
    resourcesController.dispose();
    responsabiliteController.dispose();
    communicationController.dispose();
    processusVerificationController.dispose();
    problemePotientEtRisqueController.dispose();
    budgetDetailController.dispose();
    recetteAttendusController.dispose();
    for (final controller in agentControllerList) {
      controller.dispose();
    }
    for (final controller in roleControllerList) {
      controller.dispose();
    }
    super.dispose();
  }

  String? signature;
  Future<void> getData() async {
    UserModel userModel = await AuthApi().getUserId();
    setState(() {
      signature = userModel.matricule;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        key: _key,
        drawer: const DrawerMenu(),
        body: SafeArea(
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              if (Responsive.isDesktop(context))
                const Expanded(
                  child: DrawerMenu(),
                ),
              Expanded(
                flex: 5,
                child: Padding(
                  padding: const EdgeInsets.all(p10),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          if (!Responsive.isMobile(context))
                            SizedBox(
                              width: p20,
                              child: IconButton(
                                  onPressed: () => Navigator.pop(context),
                                  icon: const Icon(Icons.arrow_back)),
                            ),
                          const SizedBox(width: p10),
                          Expanded(
                              flex: 5,
                              child: CustomAppbar(
                                  title: 'Modification projet',
                                  controllerMenu: () =>
                                      _key.currentState!.openDrawer())),
                        ],
                      ),
                      Expanded(
                          child: SingleChildScrollView(
                        child: addPageWidget(),
                      ))
                    ],
                  ),
                ),
              ),
            ],
          ),
        ));
  }

  Widget addPageWidget() {
    return Form(
      key: _formKey,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Card(
            elevation: 10,
            child: Padding(
              padding: const EdgeInsets.all(p16),
              child: SizedBox(
                width: Responsive.isDesktop(context)
                    ? MediaQuery.of(context).size.width / 2
                    : MediaQuery.of(context).size.width,
                child: Column(
                  children: [
                    TitleWidget(title: widget.projetModel.nomProjet),
                    const SizedBox(
                      height: p20,
                    ),
                    Row(
                      children: [
                        Expanded(child: nomProjetWidget()),
                        const SizedBox(
                          width: p10,
                        ),
                        Expanded(child: coutProjetWidget())
                      ],
                    ),
                    responsableWidget(),
                    objectifsWidget(),
                    descriptionWidget(),
                    responsabiliteWidget(),
                    Row(
                      children: [
                        Expanded(child: communicationWidget()),
                        const SizedBox(
                          width: p10,
                        ),
                        Expanded(child: processusVerificationWidget())
                      ],
                    ),
                    Row(
                      children: [
                        Expanded(child: problemePotientEtRisqueWidget()),
                        const SizedBox(
                          width: p10,
                        ),
                        Expanded(child: budgetDetailWidget())
                      ],
                    ),
                    Row(
                      children: [
                        Expanded(child: dateDebutEtFinWidget()),
                        const SizedBox(
                          width: p10,
                        ),
                        Expanded(child: recetteAttendusWidget())
                      ],
                    ),
                    typeFinancementWidget(),
                    const SizedBox(
                      height: p20,
                    ),
                    if (dateRange == null)
                      Text("Verifiez la date du debut et fin du projet",
                          style: Theme.of(context).textTheme.headline6),
                    if (dateRange != null)
                      BtnWidget(
                          title: 'Soumettre',
                          isLoading: isLoading,
                          press: () {
                            final form = _formKey.currentState!;
                            if (form.validate()) {
                              submit();
                              form.reset();
                            }
                          })
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget nomProjetWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: nomProjetController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Nom du Projet',
          ),
          keyboardType: TextInputType.text,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget coutProjetWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: coutProjetController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Coût du Projet',
          ),
          keyboardType: TextInputType.text,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget responsableWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: responsableController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Responsable du projet',
            hintText: 'Responsable du projet',
          ),
          keyboardType: TextInputType.text,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget objectifsWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: objectifsController,
          keyboardType: TextInputType.multiline,
          textInputAction: TextInputAction.newline,
          minLines: 3,
          maxLines: 10,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Objectifs',
          ),
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget descriptionWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: descriptionController,
          keyboardType: TextInputType.multiline,
          textInputAction: TextInputAction.newline,
          minLines: 3,
          maxLines: 10,
          decoration: InputDecoration(
              border:
                  OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
              labelText: 'Description du projet',
              hintText: 'Detail du projet'),
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget resourcesWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: resourcesController,
          keyboardType: TextInputType.multiline,
          minLines: 3,
          maxLines: 5,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Resources budgetaire',
          ),
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget responsabiliteWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: responsabiliteController,
          keyboardType: TextInputType.multiline,
          textInputAction: TextInputAction.newline,
          minLines: 3,
          maxLines: 5,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Responsabilité',
          ),
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget communicationWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: communicationController,
          keyboardType: TextInputType.multiline,
          textInputAction: TextInputAction.newline,
          minLines: 3,
          maxLines: 5,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Communication',
          ),
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget processusVerificationWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: processusVerificationController,
          keyboardType: TextInputType.multiline,
          textInputAction: TextInputAction.newline,
          minLines: 3,
          maxLines: 5,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Processus de Verification',
          ),
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget problemePotientEtRisqueWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: problemePotientEtRisqueController,
          keyboardType: TextInputType.multiline,
          textInputAction: TextInputAction.newline,
          minLines: 3,
          maxLines: 5,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Problèmes potientiels et risques',
          ),
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget budgetDetailWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: budgetDetailController,
          keyboardType: TextInputType.multiline,
          textInputAction: TextInputAction.newline,
          minLines: 3,
          maxLines: 5,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Budget detailé',
          ),
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget dateDebutEtFinWidget() {
    return Container(
      margin: const EdgeInsets.only(bottom: p20),
      child: ButtonWidget(
        text: getPlageDate(),
        onClicked: () => setState(() {
          pickDateRange(context);
          FocusScope.of(context).requestFocus(FocusNode());
        }),
      ),
    );
  }

  Future pickDateRange(BuildContext context) async {
    final initialDateRange = DateTimeRange(
      start: DateTime.now(),
      end: DateTime.now().add(const Duration(hours: 24 * 3)),
    );
    final newDateRange = await showDateRangePicker(
      context: context,
      firstDate: DateTime(DateTime.now().year - 5),
      lastDate: DateTime(DateTime.now().year + 20),
      initialDateRange: dateRange ?? initialDateRange,
    );

    if (newDateRange == null) return;

    setState(() => dateRange = newDateRange);
  }

  Widget recetteAttendusWidget() {
    final headline6 = Theme.of(context).textTheme.headline6;
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Expanded(
              flex: 4,
              child: TextFormField(
                controller: recetteAttendusController,
                keyboardType: TextInputType.text,
                minLines: 1,
                decoration: InputDecoration(
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10.0)),
                  labelText: 'Investissement total',
                ),
                style: const TextStyle(),
                validator: (value) {
                  if (value != null && value.isEmpty) {
                    return 'Ce champs est obligatoire';
                  } else {
                    return null;
                  }
                },
              ),
            ),
            const SizedBox(width: p20),
            Expanded(
                flex: 1,
                child: Text(
                  "\$",
                  style: headline6,
                ))
          ],
        ));
  }

  Widget typeFinancementWidget() {
    List<String> dataList = ['FOKAD', 'Partenaire'];
    return Container(
      margin: const EdgeInsets.only(bottom: p20),
      child: DropdownButtonFormField<String>(
        decoration: InputDecoration(
          labelText: 'Financement',
          labelStyle: const TextStyle(),
          border: OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
          contentPadding: const EdgeInsets.only(left: 5.0),
        ),
        value: typeFinancement,
        isExpanded: true,
        items: dataList.map((String value) {
          return DropdownMenuItem<String>(
            value: value,
            child: Text(value),
          );
        }).toList(),
        onChanged: (value) {
          setState(() {
            typeFinancement = value!;
          });
        },
      ),
    );
  }

  Future<void> submit() async {
    final projetModel = ProjetModel(
        id: widget.projetModel.id,
        nomProjet: nomProjetController.text,
        coutProjet: coutProjetController.text,
        responsable: responsableController.text,
        objectifs: objectifsController.text,
        description: descriptionController.text,
        responsabilite: responsabiliteController.text,
        communication: communicationController.text,
        processusVerification: processusVerificationController.text,
        problemePotientEtRisque: problemePotientEtRisqueController.text,
        dateDebutEtFin:
            "Du ${DateFormat('dd/MM/yyyy').format(dateRange!.start)} - Au ${DateFormat('dd/MM/yyyy').format(dateRange!.end)}",
        budgetDetail: budgetDetailController.text,
        recetteAttendus: recetteAttendusController.text,
        typeFinancement: typeFinancement.toString(),
        observation: 'true',
        signature: signature.toString(),
        createdRef: widget.projetModel.createdRef,
        created: DateTime.now(),
        approbationDG: 'Approved',
        motifDG: '-',
        signatureDG: '-',
        approbationBudget: 'Approved',
        motifBudget: '-',
        signatureBudget: '-',
        approbationFin: 'Approved',
        motifFin: '-',
        signatureFin: '-',
        approbationDD: 'Approved',
        motifDD: '-',
        signatureDD: '-',
        ligneBudgetaire: '-',
        ressource: '-');
    await ProjetsApi().updateData(projetModel).then((value) {
      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: const Text("Mise à jour avec succès!"),
        backgroundColor: Colors.green[700],
      ));
    });
  }
}
